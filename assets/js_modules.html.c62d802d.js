import{_ as t,o as p,c as e,a as n,b as s,d as a,e as o}from"./app.ca59e623.js";const c={},i=s('<h2 id="es6-模块化" tabindex="-1"><a class="header-anchor" href="#es6-模块化" aria-hidden="true">#</a> ES6 模块化</h2><p>{%note success simple%}ES6 模块化规范是浏览器端与服务器端通用的模块化开发规范。它的出现极大的降低了前端开发者的模块化学习成本，开发者不需再额外学习 AMD、CMD 或 CommonJS 等模块化规范。{%endnote%}</p><p>ES6 模块化规范中定义：</p><ul><li>每个 js 文件都是一个独立的模块</li><li>导入其它模块成员使用 import 关键字</li><li>向外共享模块成员使用 export 关键字</li></ul><h3 id="es6-的模块化3种用法" tabindex="-1"><a class="header-anchor" href="#es6-的模块化3种用法" aria-hidden="true">#</a> <strong>ES6 的模块化3种用法</strong></h3><p>{% tabs 用法 %}</p>',6),l=s(`<p>默认导出的语法： <code>export default 默认导出的成员</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//01_test.js</span>
<span class="token comment">// 定义成员和方法</span>
<span class="token keyword">let</span> n1 <span class="token operator">=</span> <span class="token number">10</span> 
<span class="token keyword">let</span> n2 <span class="token operator">=</span> <span class="token number">20</span>
<span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// 默认导出</span>
<span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">{</span>
    n1<span class="token punctuation">,</span>
    n2<span class="token punctuation">,</span>
    show
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认导入的语法：<code>import 接收名称 from &#39;模块标志符&#39;</code></p><p>默认导入时的接收名称可以任意名称，只要是合法的成员名称即可</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 从 01_test.js 模块导入共享的成员</span>
<span class="token keyword">import</span> test <span class="token keyword">from</span> <span class="token string">&#39;./01_test.js&#39;</span>
<span class="token comment">// 输出 { n1:10,n2:20,show:[funtion:show] }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>{%note warning simple%}每个模块中，只允许使用唯一的一次 export default，否则会报错！{%endnote%}</p>`,6),u=s(`<p>按需导出的语法：<code> export 按需导出的成员</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 02_test.js</span>
<span class="token comment">// 向外按需导出变量 s1</span>
<span class="token keyword">export</span> <span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token string">&#39;abc&#39;</span>
<span class="token comment">// 向外按需导出变量 s2</span>
<span class="token keyword">export</span> <span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token number">123</span>
<span class="token comment">// 向外按需导出方法 say</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>按需导入的语法： <code>import { s1 } from &#39;模块标识符&#39;</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 导入 02_test.js 模块成员</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>s1<span class="token punctuation">,</span>s2<span class="token punctuation">,</span>say<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./02test.js&#39;</span>
<span class="token comment">// 输出 abc</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>
<span class="token comment">// 输出 123</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span>
<span class="token comment">// 输出 [funtion:say]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>say<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>{%note warning simple%}按需导出与按需导入的注意事项{%endnote%}</p><ol><li>每个模块中可以使用多次按需导出</li><li>按需导入的成员名称必须和按需导出的名称<code>保持一致</code></li><li>按需导入时，可以使用 <code>as</code> 关键字进行重命名</li><li>按需导入可以和默认导入一起使用</li></ol>`,6),r=s(`<p>{%note default simple%}如果只想单纯地执行某个模块中的代码，并不需要得到模块中向外共享的成员。此时，可以直接导入并执行模块代码{%endnote%}</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 03_test.js</span>

<span class="token comment">// 执行一个循环</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 导入</span>
<span class="token keyword">import</span> <span class="token string">&#39;./03_test.js&#39;</span>

<span class="token comment">// 直接运行此文件</span>
<span class="token comment">// 输出 0，1，2，3，....10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),d=s(`<p>{% endtabs %}</p><h2 id="promise" tabindex="-1"><a class="header-anchor" href="#promise" aria-hidden="true">#</a> Promise</h2><h3 id="回调地狱" tabindex="-1"><a class="header-anchor" href="#回调地狱" aria-hidden="true">#</a> 回调地狱</h3><p>多层回调函数的相互嵌套，就形成了回调地狱</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>

	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;延迟1秒&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>

		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;延迟2秒&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>

			console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;延迟2秒&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>回调地狱的缺点：</p><ul><li>代码耦合性太强，牵一发而动全身，难以维护</li><li>大量冗余的代码相互嵌套，代码的可读性变差</li></ul><p>{%note default simple%}为了解决回调地狱的问题，ES6（ECMAScript 2015）中新增了 Promise 的概念。{%endnote%}</p><h3 id="promise-的基本概念" tabindex="-1"><a class="header-anchor" href="#promise-的基本概念" aria-hidden="true">#</a> Promise 的基本概念</h3><ol><li><code>Promise</code> 是一个构造函数 <ul><li>我们可以创建 <code>Promise</code>的实例 <code>const p = ne w Promise()</code></li><li><code>new</code> 出来的 <code>Promise</code> 实例对象，代表一个异步操作</li></ul></li><li><code>Promise.prototype</code> 上包含一个 <code>.then()</code> 方法 <ul><li>每一次 <code>new Promise() </code>构造函数得到的实例对象，</li><li>都可以通过原型链的方式访问到 <code>.then()</code> 方法，例如 <code>p.then()</code></li></ul></li><li><code>.then()</code> 方法用来预先指定成功和失败的回调函数 <ul><li><code>p.then(成功的回调函数，失败的回调函数)</code></li><li><code>p.then(result =&gt; { }, error =&gt; { })</code></li><li>调用 <code>.then()</code> 方法时，成功的回调函数是<code>必选</code>的、失败的回调函数是可选的</li></ul></li></ol><p>{% tabs 例子 %}</p>`,11),k=s(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> fs <span class="token keyword">from</span> <span class="token string">&quot;fs&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 读文件 1.txt</span>
fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&quot;./files/1.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;utf8&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> r1</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r1<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 读文件 2.txt</span>
	fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&quot;./files/2.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;utf8&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> r2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r2<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 读文件 3.txt</span>
		fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&quot;./files/3.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;utf8&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> r3</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
			console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r3<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),m=s(`<p>{%note default simple%}调用 <code>then-fs</code> 提供的 <code>readFile()</code> 方法，可以异步地读取文件的内容，它的返回值是 <code>Promise</code> 的实例对象。因此可以调用 <code>.then()</code> 方法为每个 Promise 异步操作指定成功和失败之后的回调函数{%endnote%}</p><p>Promise 支持链式调用，从而来解决回调地狱的问题</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> thenFs <span class="token keyword">from</span> <span class="token string">&#39;then-fs&#39;</span>
<span class="token comment">// Promise 支持链式调用，从而来解决回调地狱的问题</span>
thenFs
	<span class="token comment">// 返回值是 promise 的实列对象</span>
	<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&quot;./files/1.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;utf8&quot;</span><span class="token punctuation">)</span>
	<span class="token comment">// 通过 .then 为第一个 promise 实例对象指定成功后的回调函数</span>
	<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">r1</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r1<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 在第一个 .then 中返回一个新的 promise 对象</span>
		<span class="token keyword">return</span> thenFs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&quot;./files/2.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;utf8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token comment">// 继续调用 .then ，为上一个 .then 的返回值 (新的实例对象)</span>
	<span class="token comment">// 指定成功后的回调函数</span>
	<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">r2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r2<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> thenFs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&quot;./files/3.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;utf8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token comment">// 同理 继续调用 .then ，为上一个 .then 的返回值 (新的实例对象)</span>
	<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">r3</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r3<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token comment">// 通过 .catch 捕获错误</span>
	<span class="token comment">// 前面的错误导致后续的 .then 无法正常执行</span>
	<span class="token comment">// 可以将.catch 的调用提前</span>
	<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),v=a("p",null,"{% endtabs %}",-1),b=a("h2",{id:"promise-all-与-promise-race-方法",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#promise-all-与-promise-race-方法","aria-hidden":"true"},"#"),o(" Promise.all() 与 Promise.race() 方法")],-1),g=a("p",null,"{% tabs Promsie 方法 %}",-1),f=s(`<p>{%note success simple%} <code>Promise.all()</code> 方法会发起并行的 <code>Promise</code> 异步操作，等所有的异步操作全部结束后才会执行下一步的<code> .then</code>操作（等待机制）{%endnote%}</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> thenFs <span class="token keyword">from</span> <span class="token string">&quot;then-fs&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 定义一个数组 存放异步读文件操作</span>
<span class="token keyword">const</span> promiseArr <span class="token operator">=</span> <span class="token punctuation">[</span>
	thenFs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&quot;./files/1.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;utf8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	thenFs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&quot;./files/2.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;utf8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	thenFs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&quot;./files/3.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;utf8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 将数组 作为 promise.all() 参数</span>
Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>promiseArr<span class="token punctuation">)</span>
	<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>r1<span class="token punctuation">,</span> r2<span class="token punctuation">,</span> r3<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 所有文件读取成功 （等待机制）</span>
    <span class="token comment">// 输出 r1 ，r2 ，r3 文件的内容</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r1<span class="token punctuation">,</span> r2<span class="token punctuation">,</span> r3<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 数组中 Promise 实例的顺序，</span>
<span class="token comment">// 就是最终结果的顺序！</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),h=s(`<p>{%note success simple%} <code>Promise.race()</code> 方法会发起并行的 <code>Promise</code> 异步操作，只要任何一个异步操作完成，就立即执行下一步的<code>.then </code>操作（赛跑机制）{%endnote%}</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> thenFs <span class="token keyword">from</span> <span class="token string">&quot;then-fs&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 定义一个数组 存放异步读文件操作</span>
<span class="token keyword">const</span> promiseArr <span class="token operator">=</span> <span class="token punctuation">[</span>
	thenFs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&quot;./files/1.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;utf8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	thenFs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&quot;./files/2.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;utf8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	thenFs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&quot;./files/3.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;utf8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 将数组 作为 promise.race() 参数</span>
Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span>promiseArr<span class="token punctuation">)</span>
	<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">results</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 只要任何一个异步操作完成 就执行回调函数（赛跑机制）</span>
    <span class="token comment">// 例如：文件2.txt 先读取完 </span>
    <span class="token comment">// 就输出 2.txt 的文件内容 结束</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),q=s(`<p>{% endtabs %}</p><h2 id="async-await" tabindex="-1"><a class="header-anchor" href="#async-await" aria-hidden="true">#</a> async/await</h2><p>{%note success simple%}async/await 是 ES8（ECMAScript 2017）引入的新语法，用来简化 Promise 异步操作{%endnote%}</p><ul><li><code>.then</code> 链式调用的优点：解决了回调地狱的问题</li><li><code>.then</code> 链式调用的缺点：代码冗余、阅读性差、不易理解</li></ul><p>async/await 简化 Promise 异步操作的使用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> thenFs <span class="token keyword">from</span> <span class="token string">&quot;then-fs&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 按顺序读取文件 1，2，3 的内容</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getAllFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> r1 <span class="token operator">=</span> <span class="token keyword">await</span> thenFs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&quot;./files/1.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;utf8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r1<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> r2 <span class="token operator">=</span> <span class="token keyword">await</span> thenFs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&quot;./files/2.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;utf8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> r3 <span class="token operator">=</span> <span class="token keyword">await</span> thenFs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&quot;./files/3.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;utf8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r3<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">getAllFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>{%note warning simple%} <code>async/await</code> 的使用注意事项 {%endnote%}</p><ul><li>如果在 function 中使用了 await，则 function 必须被 async 修饰</li><li>在 async 方法中，第一个 await 之前的代码会同步执行，await 之后的代码会异步执行</li></ul><h2 id="eventloop-事件循环" tabindex="-1"><a class="header-anchor" href="#eventloop-事件循环" aria-hidden="true">#</a> EventLoop（事件循环）</h2><p>JavaScript 主线程从“任务队列”中读取异步任务的回调函数，放到执行栈中依次执行。这个过程是循环不断的，所以整个的这种运行机制又称为 EventLoop（事件循环）。</p><p><img src="https://picgo-fantasy06.oss-cn-guangzhou.aliyuncs.com/img/image-20220813112817381.png" alt="事件循环"></p><p>{% folding Eventloop 例子 %}</p><p>结合 EventLoop 分析输出的顺序</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> thenFs <span class="token keyword">from</span> <span class="token string">&quot;then-fs&quot;</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
thenFs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&quot;./files/3.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;utf8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">dataStr</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;C&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;D&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正确的输出结果：</p><p>{% hideBlock 查看答案 %}ADCB</p><p>{% endhideBlock %}</p><ul><li>A 和 D 属于同步任务。会根据代码的先后顺序依次被执行</li><li>C 和 B 属于异步任务。它们的回调函数会被加入到任务队列中，等待主线程空闲时再执行</li></ul><p>{% endfolding %}</p><h2 id="宏任务和微任务" tabindex="-1"><a class="header-anchor" href="#宏任务和微任务" aria-hidden="true">#</a> 宏任务和微任务</h2><p>JavaScript 把异步任务又做了进一步的划分，异步任务又分为两类，分别是：</p><ul><li>宏任务（macrotask） <ul><li>异步 Ajax 请求、</li><li>setTimeout、setInterval、</li><li>文件操作</li><li>其它宏任务</li></ul></li><li>微任务（microtask） <ul><li>Promise.then、.catch 和 .finally</li><li>process.nextTick</li><li>其它微任务</li></ul></li></ul><p><img src="https://picgo-fantasy06.oss-cn-guangzhou.aliyuncs.com/img/image-20220813120613313.png" alt="宏任务和微任务"></p><p>{%note success simple%}宏任务和微任务的执行顺序{%endnote%}</p><p><img src="https://picgo-fantasy06.oss-cn-guangzhou.aliyuncs.com/img/01_ES6模块化与异步编程高级用法_20220813120703.jpg" alt="执行顺序"></p><p>每一个宏任务执行完之后，都会检查是否存在待执行的微任务，如果有，则执行完所有微任务之后，再继续执行下一个宏任务。</p><p>{% folding 宏任务和微任务日常例子 %}</p><p>去银行办业务的场景</p><ol><li>小云和小腾去银行办业务。首先，需要取号之后进行排队 <ul><li>宏任务队列</li></ul></li><li>假设当前银行网点只有一个柜员，小云在办理存款业务时，小腾只能等待 <ul><li>单线程，宏任务按次序执行</li></ul></li><li>小云办完存款业务后，柜员询问他是否还想办理其它业务？ <ul><li>当前宏任务执行完，检查是否有微任务</li></ul></li><li>小云告诉柜员：想要买理财产品、再办个信用卡、最后再兑换点马年纪念币？ <ul><li>执行微任务，后续宏任务被推迟</li></ul></li><li>小云离开柜台后，柜员开始为小腾办理业务 <ul><li>所有微任务执行完毕，开始执行下一个宏任务</li></ul></li></ol><p>{%endfolding%}</p><p>{% folding 宏任务和微任务练习例子 %}</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>{% hideBlock 查看答案 %}2431</p><p>{% endhideBlock %}</p><p>分析：</p><ol><li><p>先执行所有的同步任务</p><ul><li><p>第 6 行 ，第 12 行</p><p>注：promise 是同步 ，promise.then 回调才是异步</p></li></ul></li><li><p>在执行所有的微任务</p><ul><li>第9行</li></ul></li><li><p>再执行下一个宏任务</p><ul><li>第2行</li></ul></li></ol><p>{%endfolding%}</p>`,37);function w(y,x){return p(),e("div",null,[i,n(" tab 默认导出与默认导入 "),l,n(" endtab "),n(" tab 按需导入与导出 "),u,n(" endtab "),n(" tab 直接导入"),r,n(" endtab "),d,n(" tab  基于回调函数按顺序读取文件内容 "),k,n(" endtab "),n(" tab  基于 then-fs 读取文件内容 "),m,n(" endtab "),v,b,g,n(" tab  Promise.all() 方法 "),f,n(" endtab "),n(" tab   Promise.race() 方法 "),h,n(" endtab "),q])}const _=t(c,[["render",w],["__file","js_modules.html.vue"]]);export{_ as default};
